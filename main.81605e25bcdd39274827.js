webpackJsonp([1],{DOf8:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function l(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n("U7vG"),s=r(i),c=n("N4QR"),f=r(c),d=function(e){function t(e){a(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={developers:[],search:""},n}return l(t,e),u(t,[{key:"searchDeveloper",value:function(e){var t=f.default;t=t.filter(function(t){return-1!==t.name.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.company.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.github.toLowerCase().search(e.target.value.toLowerCase())||-1!==t.city.toLowerCase().search(e.target.value.toLowerCase())||t.skills.find(function(t){return t.includes(e.target.value.toLowerCase())})}),this.setState({developers:t})}},{key:"componentWillMount",value:function(){this.setState({developers:f.default})}},{key:"render",value:function(){return s.default.createElement("div",null,s.default.createElement("h1",null,"Awesome Developers"),s.default.createElement("input",{type:"text",placeholder:"Search",onChange:this.searchDeveloper.bind(this)}),s.default.createElement("div",null,s.default.createElement("p",null,"A curated list of awesome developers."),s.default.createElement("div",{className:"developer-list"},this.state.developers.map(function(e,t){return s.default.createElement("div",{className:"developer",key:t},s.default.createElement("img",{src:"https://avatars.githubusercontent.com/"+e.github,className:"profile-image",alt:"Profile Image"}),s.default.createElement("div",null,e.name),s.default.createElement("div",null,e.skills.join(", ")),s.default.createElement("div",null,e.company),s.default.createElement("div",null,e.city),s.default.createElement("div",null,e.github))}))))}}]),t}(i.Component);t.default=d},N4QR:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=[{name:"Shreyas Agarkar",company:"Rentomojo",skills:["javascript","angular","react","node","webpack"],city:"Bangalore",github:"shreyas-a"}]},"XgI/":function(e,t,n){t=e.exports=n("FZ+f")(void 0),t.push([e.i,".developer-list {\n  text-align: center; }\n\n.developer {\n  border: 1px solid grey;\n  border-radius: 10px;\n  padding: 10px;\n  margin: 10px;\n  width: 30%;\n  display: inline-block; }\n\n.profile-image {\n  width: 50px;\n  border-radius: 30px; }\n",""])},"Yq+E":function(e,t,n){var r=n("XgI/");"string"==typeof r&&(r=[[e.i,r,""]]);var a={};a.transform=void 0;n("MTIv")(r,a);r.locals&&(e.exports=r.locals)},qYAe:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}var a=n("U7vG"),o=r(a),l=n("O27J"),u=n("DOf8"),i=r(u);n("Yq+E"),(0,l.render)(o.default.createElement(i.default,null),document.getElementById("root"))}},["qYAe"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,